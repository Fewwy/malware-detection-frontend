import './App.scss';

import React, { useEffect, useMemo } from 'react';
import { useHistory, useLocation } from 'react-router-dom';

import { Banner } from '@patternfly/react-core/dist/esm/components/Banner/index';
import { GET_MALWARE_COUNT } from './operations/queries';
import { Routes } from './Routes';
import { hasMalware } from './store/cache';
import messages from './Messages';
import { useIntl } from 'react-intl';
import { useQuery } from '@apollo/client';

const App = (props) => {
    const { data, loading } = useQuery(GET_MALWARE_COUNT);
    const intl = useIntl();
    const { pathname } = useLocation();
    const { push } = useHistory();
    const appNavClick = useMemo(
        () => ({
            signatures(redirect) {
                insights.chrome.appNavClick({ id: 'signatures', redirect });
            },
            systems(redirect) {
                insights.chrome.appNavClick({ id: 'systems', redirect });
            }
        }),
        []
    );

    !loading && hasMalware(Number(data?.ruleStats?.matchedCount) !== 0);

    useEffect(() => {
        insights.chrome.init();
        const baseComponentUrl = pathname.split('/')[4];
        const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {
            if (event.domEvent) {
                push(`/${event.navId}`);
                appNavClick[baseComponentUrl] !== undefined
                    ? appNavClick[baseComponentUrl](true)
                    : appNavClick.signatures;
            }
        });

        return () => unregister();
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    return <React.Fragment>
        { !loading && hasMalware() && <Banner variant="danger" className='ins-l-malwareBanner'>{intl.formatMessage(messages.weDetected)}</Banner>}
        <Routes childProps={props} />
    </React.Fragment>;
};

export default App;
