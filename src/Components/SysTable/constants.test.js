/* eslint-disable react/prop-types */
import React from 'react';
import { mergedColumns } from './constants';

const intl = {
  formatMessage: jest.fn((msg) => msg.defaultMessage),
};

const messages = {
  name: { defaultMessage: 'Name' },
  dataNotAvailable: { defaultMessage: 'Data not available' },
  lastStatus: { defaultMessage: 'Last Status' },
  lastMatched: { defaultMessage: 'Last Matched' },
  noHostHas: { defaultMessage: 'No Host Has' },
  never: { defaultMessage: 'Never' },
  totalMatches: { defaultMessage: 'Total Matches' },
  totalMatchesNote: { defaultMessage: 'Total Matches Note' },
  lastScan: { defaultMessage: 'Last Scan' },
};

const InsightsLink = ({ to, children }) => <a href={to}>{children}</a>;
const StatusLabel = ({ isDisabled, hasMatch }) => (
  <span>{isDisabled ? 'Disabled' : hasMatch ? 'Matched' : 'No Match'}</span>
);
const Tooltip = ({ content, children }) => (
  <span title={content}>{children}</span>
);
const DateFormat = ({ date }) => <time>{date.toLocaleString()}</time>;
const cellWidth = (width) => width;
const info = ({ tooltip }) => tooltip;

const columns = [
  {
    title: intl.formatMessage(messages.name),
    transforms: [cellWidth(30)],
    key: 'displayName',
    sortBy: ['DISPLAY_NAME'],
    renderFunc: (displayName, id) => (
      <InsightsLink to={`/systems/${id}`}>{displayName}</InsightsLink>
    ),
  },
  {
    title: 'Group',
    key: 'groups',
    sortBy: ['GROUP_NAME'],
    requiresDefault: true,
    props: { isStatic: false },
  },
  {
    title: 'Tags',
    key: 'tags',
    props: { width: 10, isStatic: true },
  },
  {
    title: 'OS',
    key: 'osVersion',
    sortBy: ['OS_VERSION'],
    props: { width: 10 },
    renderFunc: (osVersion) =>
      osVersion
        ? `RHEL ${osVersion}`
        : intl.formatMessage(messages.dataNotAvailable),
  },
  {
    title: intl.formatMessage(messages.lastStatus),
    transforms: [cellWidth(10)],
    key: 'hasMatch',
    sortBy: ['HAS_MATCH'],
    renderFunc: (hasMatch, _, { isDisabled }) => (
      <StatusLabel isDisabled={isDisabled} hasMatch={hasMatch} displayMatch />
    ),
  },
  {
    title: intl.formatMessage(messages.lastMatched),
    transforms: [cellWidth(10)],
    key: 'lastMatchDate',
    sortBy: ['LAST_MATCH_DATE'],
    renderFunc: (lastMatchDate) =>
      lastMatchDate ? (
        <Tooltip
          content={<DateFormat date={new Date(lastMatchDate)} type="exact" />}
        >
          <span>
            <DateFormat date={new Date(lastMatchDate)} />
          </span>
        </Tooltip>
      ) : (
        <Tooltip content={intl.formatMessage(messages.noHostHas)}>
          <span>{intl.formatMessage(messages.never)}</span>
        </Tooltip>
      ),
  },
  {
    title: intl.formatMessage(messages.totalMatches),
    transforms: [
      cellWidth(10),
      info({
        tooltip: intl.formatMessage(messages.totalMatchesNote),
      }),
    ],
    key: 'totalMatches',
    sortBy: ['TOTAL_MATCHES'],
    renderFunc: (totalMatches, _, { id }) => (
      <InsightsLink to={`/systems/${id}`}>
        {totalMatches?.toLocaleString()}
      </InsightsLink>
    ),
  },
  {
    title: intl.formatMessage(messages.lastScan),
    key: 'lastScanDate',
    sortBy: ['LAST_SCAN_DATE'],
    renderFunc: (lastScanDate) => (
      <Tooltip
        content={<DateFormat date={new Date(lastScanDate)} type="exact" />}
      >
        <span>
          <DateFormat date={new Date(lastScanDate)} />
        </span>
      </Tooltip>
    ),
  },
];

const defaultColumns = [
  {
    key: 'displayName',
    sortKey: 'display_name',
    title: 'Name',
  },
  {
    key: 'groups',
    sortKey: 'group_name',
    title: 'Group',
    props: {
      width: 10,
    },
  },
  {
    key: 'tags',
    title: 'Tags',
    props: {
      width: 10,
      isStatic: true,
    },
  },
];

describe('mergedColumns', () => {
  test('should return merged columns with title changed to "Workspace" when isWorkspaceEnabled is true', () => {
    const result = mergedColumns(true, columns)(defaultColumns);

    const expected = [
      {
        title: 'Name',
        key: 'displayName',
        sortBy: ['DISPLAY_NAME'],
        sortKey: 'display_name',
        transforms: [30],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Workspace',
        key: 'groups',
        sortBy: ['GROUP_NAME'],
        requiresDefault: true,
        sortKey: 'group_name',
        props: {
          width: 10,
          isStatic: false,
        },
      },
      {
        title: 'Tags',
        key: 'tags',
        props: {
          width: 10,
          isStatic: true,
        },
      },
      {
        title: 'OS',
        key: 'osVersion',
        sortBy: ['OS_VERSION'],
        props: {
          width: 10,
        },
        renderFunc: expect.any(Function),
      },
      {
        title: 'Last Status',
        transforms: [10],
        key: 'hasMatch',
        sortBy: ['HAS_MATCH'],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Last Matched',
        transforms: [10],
        key: 'lastMatchDate',
        sortBy: ['LAST_MATCH_DATE'],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Total Matches',
        transforms: [10, 'Total Matches Note'],
        key: 'totalMatches',
        sortBy: ['TOTAL_MATCHES'],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Last Scan',
        key: 'lastScanDate',
        sortBy: ['LAST_SCAN_DATE'],
        renderFunc: expect.any(Function),
        props: {},
      },
    ];

    expect(result).toEqual(expected);
  });

  test('should return merged columns with title as "Group" when isWorkspaceEnabled is false', () => {
    const result = mergedColumns(false, columns)(defaultColumns);

    const expected = [
      {
        title: 'Name',
        key: 'displayName',
        sortBy: ['DISPLAY_NAME'],
        sortKey: 'display_name',
        transforms: [30],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Group',
        key: 'groups',
        sortBy: ['GROUP_NAME'],
        requiresDefault: true,
        sortKey: 'group_name',
        props: {
          width: 10,
          isStatic: false,
        },
      },
      {
        title: 'Tags',
        key: 'tags',
        props: {
          width: 10,
          isStatic: true,
        },
      },
      {
        title: 'OS',
        key: 'osVersion',
        sortBy: ['OS_VERSION'],
        props: {
          width: 10,
        },
        renderFunc: expect.any(Function),
      },
      {
        title: 'Last Status',
        transforms: [10],
        key: 'hasMatch',
        sortBy: ['HAS_MATCH'],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Last Matched',
        transforms: [10],
        key: 'lastMatchDate',
        sortBy: ['LAST_MATCH_DATE'],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Total Matches',
        transforms: [10, 'Total Matches Note'],
        key: 'totalMatches',
        sortBy: ['TOTAL_MATCHES'],
        renderFunc: expect.any(Function),
        props: {},
      },
      {
        title: 'Last Scan',
        key: 'lastScanDate',
        sortBy: ['LAST_SCAN_DATE'],
        renderFunc: expect.any(Function),
        props: {},
      },
    ];

    expect(result).toEqual(expected);
  });
});
