import React from 'react';
import { createIntl, createIntlCache } from 'react-intl';
import { Tooltip } from '@patternfly/react-core';
import { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';
import { InsightsLink } from '@redhat-cloud-services/frontend-components/InsightsLink';
import messages from '../../Messages';
import {
  cellWidth,
  info
} from '@patternfly/react-table/dist/esm/components/Table/index';
import { entitiesReducer } from '../../store/index';
const cache = createIntlCache();
const locale = navigator.language.slice(0, 2);

export const intl = createIntl(
  {
    locale,
  },
  cache
);

export const intlSettings = { locale };
export const defaultOnLoad =
  (columns, getRegistry) =>
    ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>
      getRegistry().register({
        ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns), {
          page: 1,
          perPage: 10,
          sortBy: {
            key: 'totalMatches',
            direction: 'desc',
          },
        }),
      });

export const columns = (workspacesEnabled) => [
  {
    title: intl.formatMessage(messages.name),
    transforms: [cellWidth(30)],
    key: 'displayName',
    sortBy: ['DISPLAY_NAME'],
    renderFunc: (displayName, id) => <InsightsLink to={`/systems/${id}`}>{displayName}</InsightsLink>
  },
  {
    title: workspacesEnabled ? 'Workspace' : 'Group',
    key: 'groups',
    sortBy: ['GROUP_NAME'],
    requiresDefault: true,
    props: { isStatic: false }
  },
  {
    title: 'Tags',
    key: 'tags',
    props: { width: 10, isStatic: true }
  },
  {
    title: 'OS',
    key: 'osVersion',
    sortBy: ['OS_VERSION'],
    props: { width: 10 },
    renderFunc: (osVersion) => osVersion ? `RHEL ${osVersion}` : intl.formatMessage(messages.dataNotAvailable)
  },
  {
    title: intl.formatMessage(messages.lastStatus),
    transforms: [cellWidth(10)],
    key: 'hasMatch',
    sortBy: ['HAS_MATCH'],
    renderFunc: (hasMatch, _, { isDisabled }) => <StatusLabel isDisabled={isDisabled} hasMatch={hasMatch} displayMatch />
  },
  {
    title: intl.formatMessage(messages.lastMatched),
    transforms: [cellWidth(10)],
    key: 'lastMatchDate',
    sortBy: ['LAST_MATCH_DATE'],
    renderFunc: (lastMatchDate) =>
      lastMatchDate ?
        <Tooltip content={<DateFormat date={new Date(lastMatchDate)} type='exact' />}>
          <span><DateFormat date={new Date(lastMatchDate)} /></span>
        </Tooltip>
        : <Tooltip content={intl.formatMessage(messages.noHostHas)}>
          <span>{intl.formatMessage(messages.never)}</span>
        </Tooltip>
  },
  {
    title: intl.formatMessage(messages.totalMatches),
    transforms: [
      cellWidth(10),
      info({
        tooltip: intl.formatMessage(messages.totalMatchesNote)
      })
    ],
    key: 'totalMatches',
    sortBy: ['TOTAL_MATCHES'],
    renderFunc: (totalMatches, _, { id }) => <InsightsLink to={`/systems/${id}`}>{totalMatches?.toLocaleString()}</InsightsLink>
  },
  {
    title: intl.formatMessage(messages.lastScan),
    key: 'lastScanDate',
    sortBy: ['LAST_SCAN_DATE'],
    renderFunc: (lastScanDate) =>
      <Tooltip content={<DateFormat date={new Date(lastScanDate)} type='exact' />}>
        <span><DateFormat date={new Date(lastScanDate)} /></span>
      </Tooltip>

  }
];

export const appendDirection = (attributes, direction) =>
  attributes?.map((attribute) => `${attribute}_${direction}`);

export const findColumnByKey = (key) =>
  (columns || []).find((column) => column.key === key);

export const matchOptions = [
  { label: 'All', value: 'All' },
  { label: 'Matched', value: true },
  { label: 'Not Matched', value: false },
];
